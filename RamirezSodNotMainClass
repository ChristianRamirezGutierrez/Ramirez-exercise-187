//AUTHOR: Christian Ramirez Gutierrez
//COURSE: CPT187
//PURPOSE: the purpose is to interact with the user and behave as a sod store; it display menus and reports of purchases 
//STARTDATE: 12/3/2020

package edu.cpt187.ramirez.exercise6;

//imports================
import java.util.Scanner;
//=======================

public class MainClass 
{//Opening Curly Brace
	//Declaring and initializng Constants
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C'};
	public static final String INVENTORY_FILE_NAME = "MasterOrderFile.dat";	
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";	

	public static void main(String[] args) 
	{//Opening Curly Brace
		//Scanner input
		Scanner input = new Scanner(System.in);

		//Declaring and initializing variables 
		char menuSelection = ' ';
		String userName = "";

		//Inventory instance
		Inventory currentInventory = new Inventory();

		//Order instance
		Order currentOrder = new Order();

		//WriteOrder instance
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);

		//UserAccounts instance
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//Welcome Banner
		displayWelcomeBanner();

		//Main Menu
		menuSelection = validateMenuSelection(input);

		//While Structure
		while(menuSelection != 'Q') 
		{//Opening Curly Brace

			//sets UserAccountArrays
			currentUser.setUserAccountArrays();

			//gets the username
			userName = getUserName(input);

			//if structure
			if(menuSelection != 'A') 
			{//Opening Curly Brace

				//Searches file for user info
				currentUser.setSearchedIndex(userName);

				//if structure
				if(currentUser.getSearchedIndex() >= 0)
				{//Opening Curly Brace
					//Accounts Results
					displayAccountResults(userName);
					//Closing Curly Brace
				}//END OF of structure
				else
				{//Opening Curly Brace
					//Creates user account
					currentUser.setWriteOneRecord(userName, getPassword(input));

					//Accounts Results
					displayAccountResults();
				}//END OF else structure

				//Closing Curly Brace
			}//END OF if structure
			else
			{//Opening Curly Brace
				//if structure
				if(currentUser.getSearchedIndex() < 0)
				{//Opening Curly Brace
					//Login Error message
					displayLoginError();
				}//END OF if structure
				else
				{//Opening Curly Brace
					//File Menu
					menuSelection = validateFileSelection(input);

					//while Structure
					while(menuSelection!= 'R') 
					{//Opening Curly Brace
						//if structure
						if(menuSelection == 'A') 
						{//Opening Curly Brace
							//gets the file name
							currentInventory.setLoadItems(getFileName(input));

							//if structure
							if(currentInventory.getRecordCount() <= 0) 
							{//Opening Curly Brace
								//File Error Message
								displayFileError();

								//Closing Curly Brace
							}//END of if structure
							else
							{//Opening Curly Brace
								//displays record report
								displayRecordReport(currentInventory.getRecordCount());
								//Closing Curly Brace
							}//END OF else structure

							//Closing Curly Brace
						}//END OF if structure
						else
						{//Opening Curly brace
							//validates search value
							currentInventory.setSearchIndex(validateSearchValue(input));

							//if structure
							if(currentInventory.getItemSearchIndex() < 0) 
							{//Opening Curly Brace
								//Not Found Error message
								displayNotFound();
								//Closing Curly Brace
							}//END OF if structure
							else
							{//Opening Curly Brace
								//sets lastItemSelectedIndex
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());

								//sets itemID
								currentOrder.setItemID(currentInventory.getItemIDs());

								//sets itemName
								currentOrder.setItemName(currentInventory.getItemNames());

								//sets itemPrice
								currentOrder.setItemPrice(currentInventory.getItemPrices());

								//sets quantity needed
								currentOrder.setHowMany(validateHowMany(input));

								//if structure
								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{//Opening Curly Brace
									//displays error message out of stock
									displayOutOfStock();
									//Closing Curly Brace
								}//END OF if structure
								else
								{//Opening Curly Brace
									//Discount menu
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

									//sets discountName
									currentOrder.setDiscountName(currentInventory.getDiscountNames());

									//sets discountRate
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());

									//decrease in stock
									currentOrder.setDecreaseInStock(currentInventory);

									//set prizeName
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

									//if structure
									if(currentOrder.getDiscountRate() > 0.0)
									{//Opening Curly Brace
										//Order Report
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
										//Closing Curly Brace
									}//END OF structure
									else 
									{//Opening Curly Brace
										//Order Report (No Discount)
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
										//Closing Curly Brace
									}//END OF else Structure

									//Closing Curly Brace
								}//END OF else structure

								//Closing Curly Brace
							}//END OF else structure

							//Closing Curly Brace
						}//END OF else structure

						//File Menu
						menuSelection = validateFileSelection(input);

						//Closing Curly Brace
					}//END OF while Structure	

					//Closing Curly Brace	
				}//END OF else structure

				//Closing Curly Brace
			}//END OF else structure


			//Main Menu
			menuSelection = validateMenuSelection(input);
			//Closing Curly Brace
		}//END OF while Structure

		//loads items
		currentInventory.setLoadItems(orders.getfileName(), orders.getRecordCount());

		//if structure
		if(orders.getRecordCount() > 0) 
		{//Opening Curly Brace
			//Final Report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
			//Closing Curly Brace
		}//END OF if structure

		//Farewell Message
		displayFarewellMessage();
		//Input Close
		input.close();
		//Closing Curly Brace
	}//END OF main method

	//Display method
	private static void displayWelcomeBanner() 
	{//Opening Curly Brace
		System.out.println("Welcome to the Sod Store!");
		System.out.println("Various types of sod may be purchased here!");
		System.out.println("An Account needs to be created in able to");
		System.out.println("continuing your shopping experience!");
		//Closing Curly Brace
	}//END OF displayWelcomeBanner

	//Display method
	private static void displayFarewellMessage() 
	{//Opening Curly Brace
		System.out.println("Thank you for purchasing at the Sod Store");
		System.out.println("Please have an Awesome day!");
		System.out.println("***This program has now Ended***");
		//Closing Curly Brace
	}//END OF displayFarewellMessage

	//Display method
	private static void displayAccountResults() 
	{//Opening Curly Brace
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		//Closing Curly Brace
	}//END OF displayNAccountResults

	//Display Method
	private static void displayAccountResults(String borrowedUserName) 
	{//Opening Curly Brace
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("%s%s%s\n", "Account not created: username, ",  borrowedUserName, ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		//Closing Curly Brace
	}//END OF displayNAccountResults

	//Display Method
	private static void displayLoginError() 
	{//Opening Curly Brace
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is Incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		//Closing Curly Brace
	}//END OF displayLoginError

	//Display method
	private static void displayRecordReport(int borrowedRecordCount) 
	{//Opening Curly Brace
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-3s%2s\n",  borrowedRecordCount, "records processed" );
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		//Closing Curly Brace
	}//END OF displayRecordReports

	//Display method
	private static void displayOutOfStock() 
	{//Opening Curly Brace
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		//Closing Curly Brace
	}//END OF displayOutOfStock

	//Display Method
	private static void displayFileError() 
	{//Opening Curly Brace
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		//Closning Curly Brace
	}//END OF displayFileError

	//Display method
	private static void displayNotFound()
	{//Opening Curly Brace
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		//Closning Curly Brace
	}//END OF displayNotFound

	//Display method
	private static void displayMainMenu() 
	{//Opening Curly Brace
		//Declares and intiliazing local Variable
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");

		//while structure
		while(localIndex < MENU_OPTIONS.length)
		{//Opening Curly Brace
			System.out.printf("%-1s%2s%2s\n", MENU_CHARS[localIndex], " for " , MENU_OPTIONS[localIndex]);
			localIndex ++;
			//closing Curly Brace
		}//END Of while structure 
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
		//Closing Curly Brace
	}//END OF displayMainMenu

	//Display method
	private static void displayFileMenu() 
	{//Opening Curly Brace
		//Declares and intiliazing local Variable
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");

		//while structure
		while(localIndex < FILE_MENU_OPTIONS.length)
		{//Opening Curly Brace
			System.out.printf("%-1s%2s%2s\n", FILE_MENU_CHARS[localIndex], " for " , FILE_MENU_OPTIONS[localIndex]);
			localIndex ++;
			//Closing Curly Brace
		}//END Of while structure 
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
		//Closing Curly Brace
	}//END OF displayFileMenu

	//Display method
	private static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{//Opening Curly Brace
		//Declares and initializing local variable
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU:");

		//while structure
		while(localIndex < borrowedDiscountNames.length)
		{//Opening Curly Brace
			System.out.printf("%s%s%-18s%10.1f%2s\n", SUB_MENU_CHARS[localIndex], " for ", borrowedDiscountNames[localIndex], (borrowedDiscountRates[localIndex]*100), "%");
			localIndex ++;
			//Closing Curly Brace
		}//END OF while structure
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Please make your selection here: ");
		//Closing Curly Brace
	}//END OF displayDiscountMenu

	//Display method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts) 
	{//Opening Curly Brace
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-17s%18s\n", "Customer Name : ", borrowedUserName);
		System.out.println(" ");
		System.out.printf("%-17s%18s\n", "Item Name : ", borrowedItemName);
		System.out.printf("%-17s%10s%8.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-17s%18s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-17s%17.1f%2s\n", "Discount Rate", borrowedDiscountRate*100, "%");
		System.out.printf("%-17s%10s%8.2f\n", "Discount Amount", "$", borrowedDiscountAmt);
		System.out.printf("%-17s%10s%8.2f\n", "Discount Price", "$", borrowedDiscountPrice);
		System.out.println("");
		System.out.printf("%-17s%10d\n", "Quantity:", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-17s%10s%8.2f\n", "Subtotal", "$", borrowedSubTotal);
		System.out.printf("%-17s%17.1f%2s\n", "Tax rate", borrowedTaxRate*100, "%");
		System.out.printf("%-17s%10s%8.2f\n", "Tax Amount", "$", borrowedTaxAmt);
		System.out.println("");
		System.out.printf("%-17s%10s%8.2f\n", "Order total cost", "$", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-17s%15s\n", "Prize:", borrowedPrizeName );
		System.out.println(" ");
		System.out.printf("%-5s%-2d%-8s%s\n", "Buy more now: Only ", borrowedInStockCounts, borrowedItemName, "s left in-stock!");
		//Closing Curly Brace
	}//END OF displayOrderReport

	//Display method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts) 
	{//Opening Curly Brace
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-17s%18s\n", "Customer Name: ",  borrowedUserName);
		System.out.println(" ");
		System.out.printf("%-17s%18s\n", "Item Name: ",  borrowedItemName);
		System.out.printf("%-17s%10s%8.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.println(" ");
		System.out.printf("%-17s%18s\n", "Quantity: ",  borrowedHowMany);
		System.out.println(" ");
		System.out.printf("%-17s%10s%8.2f\n", "The Subtotal: ", "$", borrowedSubTotal);
		System.out.printf("%-17s%17.1f%3s\n", "Tax Rate: ",  (borrowedTaxRate*100), "%");
		System.out.printf("%-17s%10s%8.2f\n", "The Tax Amount: ", "$", borrowedTaxAmt);
		System.out.println(" ");
		System.out.printf("%-17s%10s%8.2f\n", "The TotalCost: ", "$", borrowedTotalCost);
		System.out.println(" ");
		System.out.printf("%-17s%15s\n", "Prize: ",  borrowedPrizeName);
		System.out.println(" ");
		System.out.printf("%-5s%-2d%-8s%s\n", "Buy more now: Only ", borrowedInStockCounts, borrowedItemName, "s left in-stock!");
		//Closing Curly Brace
	}//END OF displayOrderReport

	//Display method
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities,double[] borrowedOrderTotal,int borrowedRecordCount, double borrowedGrandTotal)
	{//Opening Curly Brace
		//declaring and initliziaing local variables
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-10s%15s%15s%15s%15s\n", "ID ", "NAME ", "PRICE ", "QTY ", "TOTAL ");

		//while structure
		while (localIndex < borrowedRecordCount)
		{//Opening Curly Brace
			System.out.printf("%-10d%15s%10s%5.2f%15d%9s%5.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedOrderQuantities, "$", borrowedOrderTotal[localIndex]);
			localIndex ++;
			//Closing Curly Brace
		}//END OF while structure
		System.out.println("GRAND TOTAL");
		System.out.printf("%2s%5.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");	
		//Closing Curly Brace
	}// End of the displayFinalReport

	//Getter method
	private static String getUserName(Scanner borrowedInput)
	{//Opening Curly Brace
		//Declares and initialize local variables
		String localUserName = "";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your Username: ");
		localUserName = borrowedInput.next();
		return localUserName;
		//Closing Curly Brace
	}//END OF getUserName

	//Getter method
	private static String getPassword(Scanner borrowedInput)
	{//Opening Curly Brace
		//Declares and initialize local variables
		String localPassword = "";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your password: ");
		localPassword = borrowedInput.next();
		return localPassword;
		//Closing Curly Brace
	}//END OF getPassword

	//Getter method
	private static String getFileName(Scanner borrowedInput) 
	{//Opening Curly Brace
		//Declares and initializes local variables
		String localFileName = "";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter the file name with extension (i.e. file.txt):");
		localFileName = borrowedInput.next();
		return localFileName;
		//Closing Curly Brace
	}//END OF getFileName

	//Validate method
	private static char validateMenuSelection(Scanner borrowedInput) 
	{//Opening Curly Brace
		//Declares and initializes local variables
		char localSelection = ' ';

		//Display Main Menu
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//While structure
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{//Opening Curly Brace
			System.out.println("Error");
			System.out.println("Enter a valid option:\n");

			//Display Main Menu
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			//Closing Curly Brace
		}//END OF while structure
		return localSelection;
		//Closing Curly Brace
	}//END OF validateMainMenu

	//Validate method
	private static char validateFileSelection(Scanner borrowedInput) 
	{//Opening Curly Brace
		//Declares and initializes local variables
		char localSelection = ' ';

		//Display File Menu
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//While structure
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{//Opening Curly Brace
			System.out.println("Error");
			System.out.println("Enter a valid option:\n");

			//Display File Menu
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			//Closing Curly Brace
		}//END OF while structure
		return localSelection;
		//Closing Curly Brace
	}//END OF validateMainMenu

	//Validate method
	private static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates) 
	{//Opening Curly Brace
		//Declares and initializes local variables
		char localSelection = ' ';

		//displayDiscountMenu
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//While structure
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{//Opening Curly Brace
			System.out.println("Enter a valid option: ");

			//Display discount menu
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			//Closing Curly Brace
		}//END OF while structure
		return localSelection;
		//Closing Curly Brace
	}//END OF displayDiscountMenu

	//Validate How many
	private static String validateHowMany(Scanner borrowedInput) 
	{//Opening Curly Brace
		//Declares and initializes local variables
		String stringAmt = "";
		int localHowMany = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the amount you want: ");
		stringAmt = borrowedInput.next();
		localHowMany = Integer.parseInt(stringAmt);

		//while structure
		while(localHowMany <= 0)
		{//Opening Curly Brace
			System.out.println("Enter a valid option: ");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter the amount you want: ");
			stringAmt = borrowedInput.next();
			localHowMany = Integer.parseInt(stringAmt);
			//Closing Curly Brace
		}//END OF while structure		
		return String.valueOf(localHowMany);
		//Closing Curly Brace
	}//END OF validateHowMany

	//Validate method
	private static int validateSearchValue(Scanner borrowedInput) 
	{//Opening Curly Brace
		//Declares and initializes local variables
		int localValue = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter the search value: ");
		localValue = borrowedInput.nextInt();

		//while structure
		while(localValue <= 0)
		{//Opening Curly Brace
			System.out.println("Enter a valid option: ");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("Enter the search value: ");
			localValue = borrowedInput.nextInt();
			//Closing Curly Brace
		}//END OF while structure
		return localValue;
		//Closing Curly Brace
	}//END OF validateSearchValue
	//Closing Curly Brace
}//END OF MainClass class
